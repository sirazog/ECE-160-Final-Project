#include "PS2X_lib.h"  //for v1.6


/*
 *
 * PS2 Controller example from the PS2_Lib 
 * 2021-10-08: Refactored for MSP432P401R ZJE
 *             -Changed pins to good defaults for use with RSLK 
 *             -changed all delay() to delayMicroseconds
 *
 * Original code: https://github.com/madsci1016/Arduino-PS2X
 * Documentation: http://www.billporter.info/2010/06/05/playstation-2-controller-arduino-library-v1-0/
 *
 * If you are using the PS2 bluetooth dongle, ensure that your 
 * controller turned on before the program starts
 *
 */


/******************************************************************
 * set pins connected to PS2 controller:
 *   - 1e column: original 
 *   - 2e colmun: Stef?
 * replace pin numbers by the ones you use
 ******************************************************************/
//ZJE: Modified from Bill's example to use MSP432P401R pins not taken by the
//RSLK Feel free to use other pins that not used by the RSLK, these were just
//chosen for neatness
#define PS2_DAT         14 //P1.7 <-> brown wire
#define PS2_CMD         15 //P1.6 <-> orange wire
#define PS2_SEL         34 //P2.3 <-> yellow wire (also called attention)
#define PS2_CLK         35 //P6.7 <-> blue wire
#define PS2X_DEBUG
#define PS2X_COM_DEBUG

/******************************************************************
 * select modes of PS2 controller:
 *   - pressures = analog reading of push-butttons 
 *   - rumble    = motor rumbling
 * uncomment 1 of the lines for each mode selection
 ******************************************************************/
//#define pressures   true
#define pressures   false
//#define rumble      true
#define rumble      false

PS2X ps2x; // create PS2 Controller Class

//right now, the library does NOT support hot pluggable controllers, meaning 
//you must always either restart your board after you connect the controller, 
//or call config_gamepad(pins) again after connecting the controller.

int error = 0;
byte type = 0;
byte vibrate = 0;

void setup(){
 
  Serial1.begin(9600); //ZJE: changed from Arduino deafult of 9600
  delayMicroseconds(500*1000);  //added delay to give wireless ps2 module some time to startup, before configuring it
  Serial1.println("test");
  //CHANGES for v1.6 HERE!!! **************PAY ATTENTION*************
  
  //setup pins and settings: GamePad(clock, command, attention, data, Pressures?, Rumble?) check for error
  error = 1;
  while(error) {
    error = ps2x.config_gamepad(PS2_CLK, PS2_CMD, PS2_SEL, PS2_DAT, pressures, rumble);

    if(error == 0){
      Serial1.print("Found Controller, configured successful ");
      Serial1.print("pressures = ");
    if (pressures)
      Serial1.println("true ");
    else
      Serial1.println("false");
    Serial1.print("rumble = ");
    if (rumble)
      Serial1.println("true)");
    else
      Serial1.println("false");
      Serial1.println("Try out all the buttons, X will vibrate the controller, faster as you press harder;");
      Serial1.println("holding L1 or R1 will print out the analog stick values.");
      Serial1.println("Note: Go to www.billporter.info for updates and to report bugs.");
    }  else if(error == 1)
      Serial1.println("No controller found, check wiring, see readme.txt to enable debug. visit www.billporter.info for troubleshooting tips");
     
    else if(error == 2)
      Serial1.println("Controller found but not accepting commands. see readme.txt to enable debug. Visit www.billporter.info for troubleshooting tips");

    else if(error == 3)
      Serial1.println("Controller refusing to enter Pressures mode, may not support it. ");
    delayMicroseconds(1000*1000);
  }

    
  //  Serial.print(ps2x.Analog(1), HEX);
  
  type = ps2x.readType(); 
  switch(type) {
    case 0:
      Serial1.print("Unknown Controller type found ");
      break;
    case 1:
      Serial1.print("DualShock Controller found ");
      break;
    case 2:
      Serial1.print("GuitarHero Controller found ");
      break;
    case 3:
      Serial1.print("Wireless Sony DualShock Controller found ");
      break;
   }
}

void loop() {
  /* You must Read Gamepad to get new values and set vibration values
     ps2x.read_gamepad(small motor on/off, larger motor strenght from 0-255)
     if you don't enable the rumble, use ps2x.read_gamepad(); with no values
     You should call this at least once a second
   */  
  if(error == 1) //skip loop if no controller found
    return; 
  
  if(type != 2) { //DualShock or Wireless DualShock Controller
    ps2x.read_gamepad(false, vibrate); //read controller and set large motor to spin at 'vibrate' speed
    
    if(ps2x.Button(PSB_START))         //button values will be TRUE as long as button is pressed
      Serial1.println("Start is being held");
    if(ps2x.Button(PSB_SELECT))
      Serial1.println("Select is being held");      

    if(ps2x.Button(PSB_PAD_UP)) {      
      Serial1.print("Up held this hard: ");
      Serial1.println(ps2x.Analog(PSAB_PAD_UP), DEC);
    }
    if(ps2x.Button(PSB_PAD_RIGHT)){
      Serial1.print("Right held this hard: ");
      Serial1.println(ps2x.Analog(PSAB_PAD_RIGHT), DEC);
    }
    if(ps2x.Button(PSB_PAD_LEFT)){
      Serial1.print("LEFT held this hard: ");
      Serial1.println(ps2x.Analog(PSAB_PAD_LEFT), DEC);
    }
    if(ps2x.Button(PSB_PAD_DOWN)){
      Serial1.print("DOWN held this hard: ");
      Serial1.println(ps2x.Analog(PSAB_PAD_DOWN), DEC);
    }   

    vibrate = ps2x.Analog(PSAB_CROSS);  //this will set the large motor vibrate speed based on how hard you press the blue (X) button
    if (ps2x.NewButtonState()) {        //will be TRUE if any button changes state (on to off, or off to on)
      if(ps2x.Button(PSB_L3))
        Serial1.println("L3 pressed");
      if(ps2x.Button(PSB_R3))
        Serial1.println("R3 pressed");
      if(ps2x.Button(PSB_L2))
        Serial1.println("L2 pressed");
      if(ps2x.Button(PSB_R2))
        Serial1.println("R2 pressed");
      if(ps2x.Button(PSB_TRIANGLE))
        Serial1.println("Triangle pressed");        
    }

    if(ps2x.ButtonPressed(PSB_CIRCLE))               //will be TRUE if button was JUST pressed
      Serial1.println("Circle just pressed");
    if(ps2x.NewButtonState(PSB_CROSS))               //will be TRUE if button was JUST pressed OR released
      Serial1.println("X just changed");
    if(ps2x.ButtonReleased(PSB_SQUARE))              //will be TRUE if button was JUST released
      Serial1.println("Square just released");     

    if(ps2x.Button(PSB_L1) || ps2x.Button(PSB_R1)) { //print analog stick values if L1 or R1 is pressed
      Serial1.print("Stick Values:");
      Serial1.print(ps2x.Analog(PSS_LY), DEC); //Left stick, Y axis. Other options: LX, RY, RX  
      Serial1.print(",");
      Serial1.print(ps2x.Analog(PSS_LX), DEC); 
      Serial1.print(",");
      Serial1.print(ps2x.Analog(PSS_RY), DEC); 
      Serial1.print(",");
      Serial1.println(ps2x.Analog(PSS_RX), DEC); 
    }     
  } else { //Guitar Hero Controller - shouldn't get here unless you get crazy
    ps2x.read_gamepad();          
   
    if(ps2x.ButtonPressed(GREEN_FRET))
      Serial1.println("Green Fret Pressed");
    if(ps2x.ButtonPressed(RED_FRET))
      Serial1.println("Red Fret Pressed");
    if(ps2x.ButtonPressed(YELLOW_FRET))
      Serial1.println("Yellow Fret Pressed");
    if(ps2x.ButtonPressed(BLUE_FRET))
      Serial1.println("Blue Fret Pressed");
    if(ps2x.ButtonPressed(ORANGE_FRET))
      Serial1.println("Orange Fret Pressed"); 

    if(ps2x.ButtonPressed(STAR_POWER))
      Serial1.println("Star Power Command");
    
    if(ps2x.Button(UP_STRUM))          //will be TRUE as long as button is pressed
      Serial1.println("Up Strum");
    if(ps2x.Button(DOWN_STRUM))
      Serial1.println("DOWN Strum");
 
    if(ps2x.Button(PSB_START))         //will be TRUE as long as button is pressed
      Serial1.println("Start is being held");
    if(ps2x.Button(PSB_SELECT))
      Serial1.println("Select is being held");
    
    if(ps2x.Button(ORANGE_FRET)) {     // print stick value IF TRUE
      Serial1.print("Wammy Bar Position:");
      Serial1.println(ps2x.Analog(WHAMMY_BAR), DEC); 
    } 
  }
  delayMicroseconds(50*1000);  
}
